#!/bin/sh
#
# initialize a new gopath with tools that i like/use/need

version() {
    # XXX: don't care about osx < 10.8
    if [ "$(uname)" = "Darwin" ]; then
        if [ "$(uname -m)" = "x86_64" ]; then
            echo "darwin-amd64-osx10.8"
            return
        fi
        echo "darwin-386-osx10.8"
        return
    fi
    if [ "$(uname -m)" = "x86_64" ]; then
        echo "linux-amd64"
        return
    fi
    echo "linux-386"
}

if [ -z "$1" ]; then
    echo "Usage: go-bootstrap go1.x.x"
    exit
fi

export GO_VERSION="$1"

if [ -z "$GOROOT" ]; then
    echo "Using default goroot ($HOME/go/root/$GO_VERSION)"
    export GOROOT="$HOME/go/root/$GO_VERSION"
else
    echo "Using goroot $(dirname $GOROOT)/$GO_VERSION"
    export GOROOT="$(dirname $GOROOT)/$GO_VERSION"
fi

echo "Downloading go $GO_VERSION for installation at $GOROOT"
mkdir -p $GOROOT
name="$GO_VERSION.$(version).tar.gz"
url="https://storage.googleapis.com/golang/$name"
wget --no-check-certificate -O "/tmp/$name" "$url"
tar -xzf "/tmp/$name" -C $GOROOT --strip-components=1

export PATH="$GOROOT/bin:$PATH"

echo ""
echo "Set:"
echo "export GOROOT=$GOROOT"
echo "export GOPATH=$GOPATH"
echo "export PATH=$GOROOT/bin:\$PATH"
echo ""

echo "installing go.tools commands on GOPATH $GOPATH..."
go get golang.org/x/tools/cmd/goimports
go get golang.org/x/tools/cmd/godoc
go get golang.org/x/tools/cmd/oracle
go get golang.org/x/tools/cmd/vet
go get golang.org/x/tools/cmd/cover
go get golang.org/x/tools/cmd/present

if [ -f $HOME/.go-bootstrap ]; then
    . $HOME/.go-bootstrap
fi
